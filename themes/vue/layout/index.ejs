<div class="sidebar">
  <div class="sidebar-inner-index">
    <ul class="main-menu">
      <%- partial('partials/main_menu', { context: 'sidebar' }) %>
    </ul>
  </div>
</div>

<div id="hero">
  <center>
  <div class="inner">
  <div>
      <h2 class="vue">UUOS</h2>
      <h1>
        一个通用智能合约平台
      </h1>
      <h1>
      </h1>
      <p>
        <a class="button has-icon" href="<%- url_for("https://www.jianshu.com/p/32b317be9fa1") %>" target="_blank">为什么是UUOS?</a>
        <a class="button white" href="<%- url_for("https://uuos.github.io/uuos") %>" target="_blank">开始</a>
        <a class="button gray has-icon" href="https://github.com/uuos/uuos" target="_blank">
          <%- partial('icons/github-dark') %>
          GITHUB</a>
      </p>
    </div>
  </div>
  </center>
</div>

<div>
</div>

<div id="highlights">
  <div class="inner">
    <div class="point">
      <h2>可扩展性</h2>
      <p align="left">UUOS有着良好的扩展性，支持多种智能合约虚拟机，目前除了支持wasm虚拟机，还支持Python, EVM, Lua，Java等虚拟机，集成一种新的虚拟机非常方便.</p>
    </div>

    <div class="point">
      <h2>易用性</h2>
      <p align="left">UUOS专注于将Python语言应用于智能合约的开发，提高智能合约语言的易用性，同时注重智能合约的安全性.</p>
    </div>

    <div class="point">
      <h2>在线调试</h2>
      <p>
				<p align="left">UUOS支持通过Visual Studio Code等开发工具直接调试C++和Python等智能合约，方便智能合约的开发.</p>
      </p>
    </div>
    <div class="point">
      <h2>链上升级</h2>
      <p>
				<p align="left">UUOS可以做到在不停止结点的情况下升级区块链的VM等模块.</p>
      </p>
    </div>
  </div>
</div>

<div id="roadmap" class="roadmap">
	<h2>项目历程</h2>
	<div class="line hidden-xs hidden-sm"></div>
	<div class="container hidden-xs hidden-sm" style="width: 94%;margin-top: -83px;margin-bottom: 20px">
		<div class="row">
			<div class="col col-lg-3 col-md-3 step" >
				<p class="date">2017.08 - 2017.12</p>
				<div class="square"></div>
				<div class="step-txt">
					<p class="txt-list"><span>8-26：</span>在Eos上集成Python交互式控制台</p>
					<p class="txt-list"><span>9-14：</span>第一条HellowWorld版本的Python智能合约代码得以在基于Eos平台的区块链上运行</p>
					<p class="txt-list"><span>12-21：</span>开始集成micropython虚拟机</p>

				</div>
			</div>
			<div class="col col-lg-3 col-md-3 step" >
				<p class="date">2018.03 - 2018.05</p>
				<div class="square"></div>
				<div class="step-txt">
					<p class="txt-list"><span>3-18：</span>开始集成以太坊智能合约虚拟机EVM</p>
					<p class="txt-list"><span>3-20：</span>以太坊智能合约成功运行在基于Eos的平台上</p>
					<p class="txt-list"><span>4-10：</span>开始支持智能合约运程执行，用Python代码实现</p>
					<p class="txt-list"><span>4-13：</span>实现read only版本的database C API接口</p>
					<p class="txt-list"><span>4-15：</span>实现Go版本的智能合约运程执行接口</p>
					<p class="txt-list"><span>5-21：</span>实现C++版本的智能合约运程执行接口</p>


				</div>
			</div>
			<div class="col col-lg-3 col-md-3 step" >
				<p class="date">2018.06</p>
				<div class="square"></div>
				<div class="step-txt">
					<p class="txt-list"><span>6-04：</span>提出通用VM API接口的概念，方便集成新的VM</p>
					<p class="txt-list"><span>6-05：</span>通过通用VM API接口成功实现把C++智能合约代码编译成native code并执行，方便C++智能合约的调试，主程序或者plugin与智能合约的交互变得更加方便简单</p>
					<p class="txt-list"><span>6-07：</span>实现所有VM通过vm_manager来进行统一管理，抽象出5个C API接口来方便新虚拟机的集成</p>
					<p class="txt-list"><span>6-21：</span>支持所有库编译成动态库</p>
					<p class="txt-list"><span>6-29：</span>提出预加载的概念，Node或者BP启动时可以通过多个线程来以JIT的方式加载合约的代码，加快合约的执行速度</p>

				</div>
			</div>
			<div class="col col-lg-3 col-md-3 step" >
				<p class="date">2018.07 - 2018.09</p>
				<div class="square"></div>
				<div class="step-txt">
					<p class="txt-list"><span>7-02：</span>将JIT模式当成一种有限资源，可以像帐户名一样通过竞价获取</p>
					<p class="txt-list"><span>7-05：</span>重构IPC接口</p>
					<p class="txt-list"><span>8-18：</span>重构EVM虚拟机接口</p>
					<p class="txt-list"><span>8-27：</span>支持Lua作为智能合约语言</p>
					<p class="txt-list"><span>9-06：</span>支持Java作为智能合约语言</p>

				</div>
			</div>
		</div>
	</div>



	<div class="container hidden-lg hidden-md" style="width: 94%;  position: relative;overflow: hidden;margin-bottom: 20px">
		<div class="line1 hidden-lg hidden-md"></div>
		<div class="step-list1 list1" >
			<div class="left"><div class="square square1"></div></div>
			<div class="right">
				<p class="date">2017.08 - 2017.12</p>
				<div class="step-txt"  style="width: 100%">
					<p class="txt-list"><span>8-26：</span>在Eos上集成Python交互式控制台</p>
					<p class="txt-list"><span>9-14：</span>第一条HellowWorld版本的Python智能合约代码得以在基于Eos平台的区块链上运行</p>
					<p class="txt-list"><span>12-21：</span>开始集成micropython虚拟机</p>

				</div>
			</div>
			<div style="clear: both"></div>
		</div>
		<div class="step-list1">
			<div class="left"><div class="square square1"></div></div>
			<div class="right">
				<p class="date">2018.03 - 2018.05</p>
				<div class="step-txt"  style="width: 100%">
					<p class="txt-list"><span>3-18：</span>开始集成以太坊智能合约虚拟机EVM</p>
					<p class="txt-list"><span>3-20：</span>以太坊智能合约成功运行在基于Eos的平台上</p>
					<p class="txt-list"><span>4-10：</span>开始支持智能合约运程执行，用Python代码实现</p>
					<p class="txt-list"><span>4-13：</span>实现read only版本的database C API接口</p>
					<p class="txt-list"><span>4-15：</span>实现Go版本的智能合约运程执行接口</p>
					<p class="txt-list"><span>5-21：</span>实现C++版本的智能合约运程执行接口</p>

				</div>
			</div>
			<div style="clear: both"></div>
		</div>
		<div class="step-list1">
			<div class="left"><div class="square square1"></div></div>
			<div class="right">
				<p class="date">2018.06</p>
				<div class="step-txt"  style="width: 100%">
					<p class="txt-list"><span>6-04：</span>提出通用VM API接口的概念，方便集成新的VM</p>
					<p class="txt-list"><span>6-05：</span>通过通用VM API接口成功实现把C++智能合约代码编译成native code并执行，方便C++智能合约的调试，主程序或者plugin与智能合约的交互变得更加方便简单</p>
					<p class="txt-list"><span>6-07：</span>实现所有VM通过vm_manager来进行统一管理，抽象出5个C API接口来方便新虚拟机的集成</p>
					<p class="txt-list"><span>6-21：</span>支持所有库编译成动态库</p>
					<p class="txt-list"><span>6-29：</span>提出预加载的概念，Node或者BP启动时可以通过多个线程来以JIT的方式加载合约的代码，加快合约的执行速度</p>

				</div>
			</div>
			<div style="clear: both"></div>
		</div>
		<div class="step-list1">
			<div class="left"><div class="square square1"></div></div>
			<div class="right">
				<p class="date">2018.07 - 2018.09</p>
				<div class="step-txt"  style="width: 100%">
					<p class="txt-list"><span>7-02：</span>将JIT模式当成一种有限资源，可以像帐户名一样通过竞价获取</p>
					<p class="txt-list"><span>7-05：</span>重构IPC接口</p>
					<p class="txt-list"><span>8-18：</span>重构EVM虚拟机接口</p>
					<p class="txt-list"><span>8-27：</span>支持Lua作为智能合约语言</p>
					<p class="txt-list"><span>9-06：</span>支持Java作为智能合约语言</p>

				</div>
			</div>
			<div style="clear: both"></div>
		</div>


	</div>

</div>

<div id="footer">
  <p>
    <a class="social-icon" href="https://github.com/uuos/uuos" target="_blank">
      <%- partial('icons/github1') %>
    </a>
    <a class="social-icon" href="https://t.me/uuosio" target="_blank">
      <%- partial('icons/telegram1') %>
    </a>
    <a class="social-icon" href="https://twitter.com/uuosio" target="_blank">
      <%- partial('icons/twitter1') %>
    </a>
    <a class="social-icon" href="https://www.youtube.com/channel/UCn2JYftmWF5lAvc9R-r_jyQ/featured" target="_blank">
			<%- partial('icons/youtube1') %>    
		</a>
  </p>
  <p>Released under the <a href="https://opensource.org/licenses/MIT" target="_blank">MIT License</a><br>
  Copyright &copy; 2014-<%- new Date().getFullYear() %> UUOS</p>
</div>

<div id="video-modal" class="modal">
  <div class="video-space" style="padding: 56.25% 0 0 0; position: relative;"><iframe src="https://player.vimeo.com/video/247494684" style="height: 100%; left: 0; position: absolute; top: 0; width: 100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
</div>

<script>
(function () {
  var topScrolled = false
  var sponsors = document.getElementById('sponsors')
  var sponsorTop = sponsors.offsetTop
  var sponsorActive = false

  window.addEventListener('resize', function () {
    sponsorTop = sponsors.offsetTop
  })

  window.addEventListener('scroll', function () {
    if (window.pageYOffset > 165 && !topScrolled) {
      topScrolled = true
      document.getElementById('mobile-bar').classList.remove('top')
    } else if (window.pageYOffset <= 165 && topScrolled) {
      topScrolled = false
      document.getElementById('mobile-bar').classList.add('top')
    }
    if (window.pageYOffset > sponsorTop - 100) {
      if (!sponsorActive) {
        sponsorActive = true
        sponsors.classList.add('active')
      }
    } else {
      if (sponsorActive) {
        sponsorActive = false
        sponsors.classList.remove('active')
      }
    }
  })
})()
</script>